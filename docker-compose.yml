version: "3.8"

services:
  db:
    image: postgres:15.2
    container_name: db_challenge
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=challenge
      - POSTGRES_USER=adm
      - POSTGRES_PASSWORD=1234
    ports:
      - "5432:5432"
    networks:
      - challenge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adm -d challenge"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis_challenge
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - challenge-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  app:
    build: .
    container_name: app_challenge
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - CONTEXT_PATH=/operaciones-y-ejecucion/operaciones-de-mercado/v1
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/challenge
      - SPRING_DATASOURCE_USERNAME=adm
      - SPRING_DATASOURCE_PASSWORD=1234
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - challenge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/operaciones-y-ejecucion/operaciones-de-mercado/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
        
volumes:
  postgres_data:
  redis_data:

networks:
  challenge-network:
    driver: bridge